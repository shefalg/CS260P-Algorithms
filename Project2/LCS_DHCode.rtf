{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red106\green62\blue62;\red63\green127\blue95;
\red0\green0\blue192;\red42\green0\blue255;}
{\*\expandedcolortbl;;\csgenericrgb\c49804\c0\c33333;\csgenericrgb\c41569\c24314\c24314;\csgenericrgb\c24706\c49804\c37255;
\csgenericrgb\c0\c0\c75294;\csgenericrgb\c16471\c0\c100000;}
\margl1440\margr1440\vieww28600\viewh17520\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 import\cf0  java.util.*;\
\cf2 public\cf0  \cf2 class\cf0  LCS_DH \{\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String \cf3 ar\cf0 [])\
	\{\
		\cf2 for\cf0 (\cf2 int\cf0  \cf3 i\cf0 =3;\cf3 i\cf0 <=3000;\cf3 i\cf0 +=3)\
		\{\
		String \cf3 words\cf0 []=\cf2 new\cf0  String[2];\
		\cf3 words\cf0 =generateRandomWords(\cf3 i\cf0 );	\
\pard\pardeftab720\partightenfactor0
\cf4 //		words[0]="ABCDGH";\cf0 \
\cf4 //		words[1]="AEDFHR";\cf0 \
\cf4 //		System.out.println(words[0]+"\\n"+words[1]);	\cf0 \
\cf4 //		System.out.println("LCS \ul Hirschberg\ulnone  : "+getLongestCommonSubsequence(words[0],words[1]));\cf0 \
		\cf2 long\cf0  \cf3 startTime\cf0 =Time.getCpuTime();\
		\cf2 int\cf0  \cf3 \ul \ulc3 res\cf0 \ulnone =getLongestCommonSubsequence(\cf3 words\cf0 [0],\cf3 words\cf0 [1]);\
		\cf2 long\cf0  \cf3 finishTime\cf0 =Time.getCpuTime();\
		System.\cf5 out\cf0 .println(\cf3 finishTime\cf0 -\cf3 startTime\cf0 );\
		\}\
	\}\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 int\cf0  getLongestCommonSubsequence(String \cf3 a\cf0 ,String \cf3 b\cf0 )\
	\{\
		\cf2 int\cf0  \cf3 m\cf0 =\cf3 a\cf0 .length();\
		\cf2 int\cf0  \cf3 n\cf0 =\cf3 b\cf0 .length();\
		\cf2 int\cf0  \cf3 dp\cf0 [][]=\cf2 new\cf0  \cf2 int\cf0 [2][\cf3 n\cf0 +1];\
		\cf2 for\cf0 (\cf2 int\cf0  \cf3 i\cf0 =0;\cf3 i\cf0 <\cf3 m\cf0 ;\cf3 i\cf0 ++)\
		\{\
			reinitializeArray(\cf3 dp\cf0 ,\cf3 n\cf0 );\
			\cf2 for\cf0 (\cf2 int\cf0  \cf3 j\cf0 =0;\cf3 j\cf0 <\cf3 n\cf0 ;\cf3 j\cf0 ++)\
			\{\
				\cf2 if\cf0 (\cf3 a\cf0 .charAt(\cf3 i\cf0 )==\cf3 b\cf0 .charAt(\cf3 j\cf0 ))\
					\cf3 dp\cf0 [1][\cf3 j\cf0 +1]=1+\cf3 dp\cf0 [0][\cf3 j\cf0 ];\
				\cf2 else\cf0 \
					\cf3 dp\cf0 [1][\cf3 j\cf0 +1]=Math.max(\cf3 dp\cf0 [0][\cf3 j\cf0 +1],\cf3 dp\cf0 [1][\cf3 j\cf0 ]);		\
			\}\
		\}\
		\cf2 return\cf0  \cf3 dp\cf0 [1][\cf3 n\cf0 ];\
	\}\
	\cf2 static\cf0  \cf2 void\cf0  reinitializeArray(\cf2 int\cf0 [][] \cf3 ar\cf0 ,\cf2 int\cf0  \cf3 col\cf0 )\
	\{\
		\cf2 for\cf0 (\cf2 int\cf0  \cf3 i\cf0 =0;\cf3 i\cf0 <\cf3 col\cf0 ;\cf3 i\cf0 ++)\
		\{\
			\cf3 ar\cf0 [0][\cf3 i\cf0 ]=\cf3 ar\cf0 [1][\cf3 i\cf0 ];\
		\}\
	\}\
	\cf2 public\cf0  \cf2 static\cf0  String[] generateRandomWords(\cf2 int\cf0  \cf3 length\cf0 )\
	\{\
	    String[] \cf3 randomStrings\cf0  = \cf2 new\cf0  String[2];\
	    Random \cf3 random\cf0  = \cf2 new\cf0  Random();\
	    \cf2 for\cf0 (\cf2 int\cf0  \cf3 i\cf0  = 0; \cf3 i\cf0  < 2; \cf3 i\cf0 ++)\
	    \{\
\cf4 //	        char[] word = new char[random.nextInt(8)+10]; // words of length 3 through 10.\cf0 \
	    	\cf2 char\cf0 [] \cf3 word\cf0  = \cf2 new\cf0  \cf2 char\cf0 [\cf3 length\cf0 ];\
	        \cf2 for\cf0 (\cf2 int\cf0  \cf3 j\cf0  = 0; \cf3 j\cf0  < \cf3 word\cf0 .\cf5 length\cf0 ; \cf3 j\cf0 ++)\
	        \{\
	            \cf3 word\cf0 [\cf3 j\cf0 ] = (\cf2 char\cf0 )(\cf6 'a'\cf0  + \cf3 random\cf0 .nextInt(26));\
	        \}\
	        \cf3 randomStrings\cf0 [\cf3 i\cf0 ] = \cf2 new\cf0  String(\cf3 word\cf0 );\
	    \}\
	    \cf2 return\cf0  \cf3 randomStrings\cf0 ;\
	\}\
\}\
}